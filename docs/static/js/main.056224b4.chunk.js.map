{"version":3,"sources":["entity/buttonCodes.js","reducer/SnakeGameReducer.js","context/SnakeGameContext.js","pages/SnakeGameWrapper.js","components/header.js","App.js","index.js"],"names":["SnakeGameReducer","state","type","payload","snakeBody","direction","isActive","appleCords","count","maxCount","newGame","SnakeGameContext","createContext","SnakeGameProvider","children","useReducer","cordX","cordY","speed","items","dispatch","Provider","value","setSnakeBody","length","setDirection","setIsActive","setAppleCords","Snake","ref","useRef","useContext","useEffect","scene","random","document","addEventListener","buttonManagement","removeEventListener","event","codes","includes","code","up","some","item","down","left","right","current","canvas","context","getContext","appleCtx","setTimeout","width","height","snakeTail","snake","map","index","elem","appleCordX","appleCordY","isHead","changeDirectionSnake","x","y","push","fillStyle","fillRect","check","forEach","idx","result","slice","concat","step","appleNesCordX","Math","floor","appleNesCordY","className","Card","id","Header","AppBar","theme","AppBarTitle","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.056224b4.chunk.js","sourcesContent":["export default [\n  'ArrowUp',\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'KeyW',\n  'KeyS',\n  'KeyA',\n  'KeyD',\n  'Space',\n];\n","const SnakeGameReducer = (state, { type, payload }) => {\n  if (!payload) {\n    return state;\n  }\n\n  switch (type) {\n    case 'SET_SNAKE_BODY':\n      return {\n        ...state,\n        snakeBody: payload.payload,\n      };\n    case 'SET_DIRECTION':\n      return {\n        ...state,\n        direction: payload.payload,\n      };\n    case 'SET_IS_ACTIVE':\n      return {\n        ...state,\n        isActive: payload.payload,\n      };\n    case 'SET_APPLE_CORDS':\n      return {\n        ...state,\n        appleCords: payload.payload,\n      };\n    case 'SET_COUNT':\n      return {\n        ...state,\n        count: payload.count,\n      };\n    case 'SET_MAX_COUNT':\n      return {\n        ...state,\n        maxCount: payload.count,\n      };\n    case 'SET_NOT_NEW_GAME':\n      return {\n        ...state,\n        newGame: payload.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default SnakeGameReducer;\n","import React, { createContext, useReducer } from 'react';\n\nimport SnakeGameReducer from '../reducer/SnakeGameReducer';\n\nexport const SnakeGameContext = createContext({});\n\nconst SnakeGameProvider = ({ children }) => {\n  const [items, dispatch] = useReducer(SnakeGameReducer, {\n    isActive: false,\n    newGame: true,\n    snakeBody: [\n      {\n        cordX: 200,\n        cordY: 200,\n      },\n    ],\n    speed: 100,\n    direction: 'right',\n    appleCords: null,\n    count: 0,\n    maxCount: 0,\n  });\n\n  const setSnakeBody = (payload) => {\n    dispatch({ type: 'SET_SNAKE_BODY', payload: { payload } });\n    if (items.snakeBody.length !== payload.length) {\n      const count = payload.length - 1;\n      dispatch({ type: 'SET_COUNT', payload: { count } });\n      if (count > items.maxCount) {\n        dispatch({ type: 'SET_MAX_COUNT', payload: { count } });\n      }\n    }\n  };\n\n  const setDirection = (payload) => {\n    dispatch({ type: 'SET_DIRECTION', payload: { payload } });\n  };\n\n  const setIsActive = (payload) => {\n    dispatch({ type: 'SET_IS_ACTIVE', payload: { payload } });\n    if (items.newGame) {\n      dispatch({ type: 'SET_NOT_NEW_GAME', payload: { payload: false } });\n    }\n  };\n\n  const setAppleCords = (payload) => {\n    dispatch({ type: 'SET_APPLE_CORDS', payload: { payload } });\n  };\n\n  return (\n    <SnakeGameContext.Provider\n      value={{\n        dispatch,\n        snakeBody: items.snakeBody,\n        setSnakeBody,\n        speed: items.speed,\n        direction: items.direction,\n        setDirection,\n        isActive: items.isActive,\n        setIsActive,\n        appleCords: items.appleCords,\n        setAppleCords,\n        count: items.count,\n        maxCount: items.maxCount,\n        newGame: items.newGame,\n      }}\n    >\n      {children}\n    </SnakeGameContext.Provider>\n  );\n};\n\nexport default SnakeGameProvider;\n","import React, { useEffect, useRef, useContext } from 'react';\nimport { Card } from 'react-md';\n\nimport codes from '../entity/buttonCodes';\n\nimport { SnakeGameContext } from '../context/SnakeGameContext';\n\nimport './SnakeGameWrapper.sass';\n\nconst Snake = () => {\n  const ref = useRef(null);\n\n  const {\n    snakeBody,\n    setSnakeBody,\n    speed,\n    direction,\n    setDirection,\n    isActive,\n    setIsActive,\n    appleCords,\n    setAppleCords,\n    newGame,\n  } = useContext(SnakeGameContext);\n\n  useEffect(() => {\n    if (isActive) {\n      scene();\n    }\n  }, [snakeBody, isActive]);\n\n  useEffect(() => {\n    random();\n  }, []);\n\n  // перехват нажатия кнопки на клавиатуре\n  useEffect(() => {\n    document.addEventListener('keydown', buttonManagement);\n    return () => {\n      document.removeEventListener('keydown', buttonManagement);\n    };\n  }, [isActive, direction]);\n\n  const buttonManagement = (event) => {\n    if (!codes.includes(event.code)) {\n      return;\n    }\n\n    const up = ['ArrowUp', 'KeyW'].some((item) => item === event.code);\n    const down = ['ArrowDown', 'KeyS'].some((item) => item === event.code);\n    const left = ['ArrowLeft', 'KeyA'].some((item) => item === event.code);\n    const right = ['ArrowRight', 'KeyD'].some((item) => item === event.code);\n\n    switch (true) {\n      case up && direction !== 'down':\n        setDirection('up');\n        break;\n      case down && direction !== 'up':\n        setDirection('down');\n        break;\n      case left && direction !== 'right':\n        setDirection('left');\n        break;\n      case right && direction !== 'left':\n        setDirection('right');\n        break;\n      case event.code === 'Space': {\n        isActive ? setIsActive(false) : setIsActive(true);\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  const scene = () => {\n    if (ref.current) {\n      const canvas = ref.current;\n      const context = canvas.getContext('2d');\n      const appleCtx = canvas.getContext('2d');\n      if (context) {\n        setTimeout(() => {\n          canvas.width = 800;\n          canvas.height = 800;\n\n          const snakeTail = [];\n          const snake = snakeBody.map((item, index) => {\n            const elem = { ...item };\n            const { cordX, cordY } = elem;\n            const { appleCordX, appleCordY } = appleCords;\n            const isHead = index === 0;\n\n            const { x, y } = changeDirectionSnake(index, cordX, cordY, canvas);\n            // console.log('x', x);\n            // console.log('y', y);\n\n            elem.cordX = x;\n            elem.cordY = y;\n\n            if (x === appleCordX && y === appleCordY) {\n              random();\n              snakeTail.push({\n                cordX: x,\n                cordY: y,\n              });\n            }\n\n            if (isHead) {\n              context.fillStyle = '#FFEB3B';\n            } else {\n              context.fillStyle = '#009688';\n            }\n\n            context.fillRect(x, y, 20, 20);\n\n            appleCtx.fillStyle = 'red';\n            appleCtx.fillRect(appleCordX, appleCordY, 20, 20);\n            return elem;\n          });\n\n          // Проверка на пересечение с хвостом.\n          const { cordX, cordY } = snake[0];\n          let check = false;\n          snakeBody.forEach((item, idx) => {\n            if (item.cordX === cordX && item.cordY === cordY) {\n              const result = snake.slice(0, idx - 1);\n              setSnakeBody(result);\n              check = true;\n            }\n          });\n\n          if (!check) {\n            const result = snake.concat(snakeTail);\n            setSnakeBody(result);\n          }\n        }, speed);\n      }\n    }\n  };\n\n  const changeDirectionSnake = (index, cordX, cordY, canvas) => {\n    const step = 20;\n    const isHead = index === 0;\n    let x = cordX;\n    let y = cordY;\n\n    if (isHead) {\n      // управление клавишами\n      if (direction === 'right') {\n        x += step;\n      }\n      if (direction === 'left') {\n        x -= step;\n      }\n      if (direction === 'up') {\n        y -= step;\n      }\n      if (direction === 'down') {\n        y += step;\n      }\n\n      // условия выхода за рамки canvas\n      if (x >= canvas.width) {\n        x = 0;\n      }\n\n      if (x < 0) {\n        x = canvas.width - step;\n      }\n\n      if (y > canvas.height - step) {\n        y = 0;\n      }\n\n      if (y < 0) {\n        y = canvas.height - step;\n      }\n    } else {\n      x = snakeBody[index - 1].cordX;\n      y = snakeBody[index - 1].cordY;\n    }\n    return { x, y };\n  };\n\n  const random = () => {\n    const max = 800;\n    const min = 20;\n    const num = 20;\n\n    const appleNesCordX =\n      Math.floor(Math.floor(Math.random() * (max - min + 1) + min) / num) * num;\n    const appleNesCordY =\n      Math.floor(Math.floor(Math.random() * (max - min + 1) + min) / num) * num;\n\n    setAppleCords({\n      appleCordX: appleNesCordX,\n      appleCordY: appleNesCordY,\n    });\n  };\n\n  return (\n    <section className=\"snake-game_wrapper\">\n      <div />\n      <div>\n        <Card className=\"snake-game_canvas-wrapper\">\n          <canvas id=\"responsive-canvas\" ref={ref} />\n        </Card>\n      </div>\n      {!isActive && !newGame && (\n        <div className=\"snake-game_message snake-game_message-pause\">ПАУЗА</div>\n      )}\n      {!isActive && newGame && (\n        <div className=\"snake-game_message snake-game_message-start\">\n          Для старта нажмите клавишу Space!\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Snake;\n","import React, { useContext } from 'react';\nimport { AppBar, AppBarTitle, AppBarAction, MoreVertSVGIcon } from 'react-md';\nimport { SnakeGameContext } from '../context/SnakeGameContext';\n\nconst Header = () => {\n  const { count, maxCount } = useContext(SnakeGameContext);\n\n  return (\n    <AppBar id=\"simple-usage-app-bar\" theme=\"primary\">\n      <AppBarTitle\n        id=\"simple-usage-title\"\n        className=\"rmd-typography--capitalize\"\n      >\n        Текущий счет: {count}\n      </AppBarTitle>\n      <AppBarTitle\n        id=\"simple-usage-title\"\n        className=\"rmd-typography--capitalize\"\n      >\n        Рекорд: {maxCount}\n      </AppBarTitle>\n      {/* <AppBarAction id=\"simple-usage-search\" first aria-label=\"Search\"> */}\n      {/*  <MoreVertSVGIcon */}\n      {/*    onClick={() => { */}\n      {/*      console.log('TEST'); */}\n      {/*    }} */}\n      {/*  /> */}\n      {/* </AppBarAction> */}\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport SnakeGameWrapper from './pages/SnakeGameWrapper';\nimport Header from './components/header';\n\nconst App = () => {\n  return (\n    <section>\n      <Header />\n      <SnakeGameWrapper />\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport SnakeGameProvider from './context/SnakeGameContext';\nimport './index.sass';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SnakeGameProvider>\n      <App />\n    </SnakeGameProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}